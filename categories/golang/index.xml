<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Tsing Wind - 清风徐来 水波不兴</title>
    <link>https://kiyonlin.github.io/categories/golang/</link>
    <description>Recent content in golang on Tsing Wind - 清风徐来 水波不兴</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 27 Nov 2020 08:25:05 +0800</lastBuildDate>
    
	<atom:link href="https://kiyonlin.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang调度器笔记</title>
      <link>https://kiyonlin.github.io/post/read/golang/golang%E8%B0%83%E5%BA%A6%E5%99%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 27 Nov 2020 08:25:05 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/read/golang/golang%E8%B0%83%E5%BA%A6%E5%99%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>CPU寄存器 汇编代码所做的工作就是把数据在内存和寄存器中搬来搬去或做一些基础的数学和逻辑运算。 通用寄存器：rax, rbx, rcx, rdx, rsi, rdi, rbp, rsp, r8, r9, r10, r11, r12, r13,</description>
    </item>
    
    <item>
      <title>在Golang中轻松使用ipset</title>
      <link>https://kiyonlin.github.io/post/work/gonetx/ipset/</link>
      <pubDate>Tue, 15 Sep 2020 10:26:01 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/gonetx/ipset/</guid>
      <description>前言 因为工作关系，需要使用ipset，但是截止目前，golang社区中对ipset的支持并不好。之前用的是go-ipset，只能满足基础的使</description>
    </item>
    
    <item>
      <title>Fasthttp系列——解析请求头</title>
      <link>https://kiyonlin.github.io/post/work/fasthttp/02fh%E8%A7%A3%E6%9E%90%E8%AF%B7%E6%B1%82%E5%A4%B4/</link>
      <pubDate>Fri, 21 Aug 2020 19:16:54 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/fasthttp/02fh%E8%A7%A3%E6%9E%90%E8%AF%B7%E6%B1%82%E5%A4%B4/</guid>
      <description>本系列通过解析fasthttp(v1.16.0)源码学习HTTP/1.1。 前言 上一篇文章我们学习了HTTP/1.1的请求行(Request L</description>
    </item>
    
    <item>
      <title>Fasthttp系列——请求行</title>
      <link>https://kiyonlin.github.io/post/work/fasthttp/01fh%E8%AF%B7%E6%B1%82%E8%A1%8C/</link>
      <pubDate>Tue, 18 Aug 2020 14:08:37 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/fasthttp/01fh%E8%AF%B7%E6%B1%82%E8%A1%8C/</guid>
      <description>本系列通过解析fasthttp(v1.16.0)源码学习HTTP/1.1。 第一行 WEB服务接收HTTP请求要做的第一件事，就是解析请求行(R</description>
    </item>
    
    <item>
      <title>解析Fiber路由管理</title>
      <link>https://kiyonlin.github.io/post/work/gofiber/fiber-router/</link>
      <pubDate>Tue, 23 Jun 2020 13:18:48 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/gofiber/fiber-router/</guid>
      <description>本文主要通过阅读Fiber源码，解析Fiber是如何管理路由的： 路由注册 路由匹配 环境：macos 10.15.4 + go 1.14.1 + fiber 1.12.1 路由注册 路由结构和路由器接口 首</description>
    </item>
    
    <item>
      <title>基于延迟计算令牌桶的gofiber频率限制中间件实现</title>
      <link>https://kiyonlin.github.io/post/work/gofiber/fiber-limiter/</link>
      <pubDate>Sat, 20 Jun 2020 10:53:18 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/gofiber/fiber-limiter/</guid>
      <description>前言 后端的api接口一般都需要限制访问频率，一般的实现算法有令牌桶，漏桶等等。其中令牌桶支持突发流量，更合适访问流量整形。 关于令牌桶算法这里</description>
    </item>
    
    <item>
      <title>fiber&#43;angular开发web</title>
      <link>https://kiyonlin.github.io/post/work/gofiber/fiblar-demo/</link>
      <pubDate>Wed, 17 Jun 2020 13:57:18 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/gofiber/fiblar-demo/</guid>
      <description>fiber是最近出道的一款基于fasthttp的web框架。 Fiber is an Express inspired web framework build on top of Fasthttp, the fastest HTTP engine for Go. Designed to ease things up for fast development with zero memory allocation and performance in mind. 我们可以用f</description>
    </item>
    
  </channel>
</rss>