<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tsing Wind - 清风徐来 水波不兴</title>
    <link>https://kiyonlin.github.io/post/</link>
    <description>Recent content in Posts on Tsing Wind - 清风徐来 水波不兴</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 25 Mar 2021 07:59:41 +0800</lastBuildDate>
    
	<atom:link href="https://kiyonlin.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2021年度计划</title>
      <link>https://kiyonlin.github.io/post/plans/2021/</link>
      <pubDate>Thu, 25 Mar 2021 07:59:41 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/plans/2021/</guid>
      <description>今年的计划： http2 查看http2(翻译)的RFC 在fasthttp中实现http2功能 学习使用gRPC 工具 实现http压测工具httpit 实现h</description>
    </item>
    
    <item>
      <title>golang调度器笔记</title>
      <link>https://kiyonlin.github.io/post/read/golang/golang%E8%B0%83%E5%BA%A6%E5%99%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 27 Nov 2020 08:25:05 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/read/golang/golang%E8%B0%83%E5%BA%A6%E5%99%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>CPU寄存器 汇编代码所做的工作就是把数据在内存和寄存器中搬来搬去或做一些基础的数学和逻辑运算。 通用寄存器：rax, rbx, rcx, rdx, rsi, rdi, rbp, rsp, r8, r9, r10, r11, r12, r13,</description>
    </item>
    
    <item>
      <title>英语学习规划</title>
      <link>https://kiyonlin.github.io/post/plans/%E8%8B%B1%E8%AF%AD%E8%A7%84%E5%88%92/</link>
      <pubDate>Thu, 12 Nov 2020 22:06:16 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/plans/%E8%8B%B1%E8%AF%AD%E8%A7%84%E5%88%92/</guid>
      <description>7-9岁全面发展阶段 7岁 报班学一套综合教材 开始正式学习语法、精读、拼写、写作 泛读分级读物300-1000本 精读 一句一句朗读出来，学习词汇、练</description>
    </item>
    
    <item>
      <title>在Golang中轻松使用ipset</title>
      <link>https://kiyonlin.github.io/post/work/gonetx/ipset/</link>
      <pubDate>Tue, 15 Sep 2020 10:26:01 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/gonetx/ipset/</guid>
      <description>前言 因为工作关系，需要使用ipset，但是截止目前，golang社区中对ipset的支持并不好。之前用的是go-ipset，只能满足基础的使</description>
    </item>
    
    <item>
      <title>Fasthttp系列——解析请求头</title>
      <link>https://kiyonlin.github.io/post/work/fasthttp/02fh%E8%A7%A3%E6%9E%90%E8%AF%B7%E6%B1%82%E5%A4%B4/</link>
      <pubDate>Fri, 21 Aug 2020 19:16:54 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/fasthttp/02fh%E8%A7%A3%E6%9E%90%E8%AF%B7%E6%B1%82%E5%A4%B4/</guid>
      <description>本系列通过解析fasthttp(v1.16.0)源码学习HTTP/1.1。 前言 上一篇文章我们学习了HTTP/1.1的请求行(Request L</description>
    </item>
    
    <item>
      <title>Fasthttp系列——请求行</title>
      <link>https://kiyonlin.github.io/post/work/fasthttp/01fh%E8%AF%B7%E6%B1%82%E8%A1%8C/</link>
      <pubDate>Tue, 18 Aug 2020 14:08:37 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/fasthttp/01fh%E8%AF%B7%E6%B1%82%E8%A1%8C/</guid>
      <description>本系列通过解析fasthttp(v1.16.0)源码学习HTTP/1.1。 第一行 WEB服务接收HTTP请求要做的第一件事，就是解析请求行(R</description>
    </item>
    
    <item>
      <title>解析Fiber路由管理</title>
      <link>https://kiyonlin.github.io/post/work/gofiber/fiber-router/</link>
      <pubDate>Tue, 23 Jun 2020 13:18:48 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/gofiber/fiber-router/</guid>
      <description>本文主要通过阅读Fiber源码，解析Fiber是如何管理路由的： 路由注册 路由匹配 环境：macos 10.15.4 + go 1.14.1 + fiber 1.12.1 路由注册 路由结构和路由器接口 首</description>
    </item>
    
    <item>
      <title>基于延迟计算令牌桶的gofiber频率限制中间件实现</title>
      <link>https://kiyonlin.github.io/post/work/gofiber/fiber-limiter/</link>
      <pubDate>Sat, 20 Jun 2020 10:53:18 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/gofiber/fiber-limiter/</guid>
      <description>前言 后端的api接口一般都需要限制访问频率，一般的实现算法有令牌桶，漏桶等等。其中令牌桶支持突发流量，更合适访问流量整形。 关于令牌桶算法这里</description>
    </item>
    
    <item>
      <title>fiber&#43;angular开发web</title>
      <link>https://kiyonlin.github.io/post/work/gofiber/fiblar-demo/</link>
      <pubDate>Wed, 17 Jun 2020 13:57:18 +0800</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/gofiber/fiblar-demo/</guid>
      <description>fiber是最近出道的一款基于fasthttp的web框架。 Fiber is an Express inspired web framework build on top of Fasthttp, the fastest HTTP engine for Go. Designed to ease things up for fast development with zero memory allocation and performance in mind. 我们可以用f</description>
    </item>
    
    <item>
      <title>(译)Angular Core 01 - Angular Templates 完全指南</title>
      <link>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angularcore01-angulartemplates%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 24 Oct 2018 08:25:08 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angularcore01-angulartemplates%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</guid>
      <description>在这篇文章(原文链接)中，我们将深入探讨Angular Core的一些高级功能！ 您可能已经遇到过ng-template这个Angular核心指</description>
    </item>
    
    <item>
      <title>(译)Angular架构04-Redux，RxJs和NgrxStore-何时使用Store以及为什么？</title>
      <link>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular%E6%9E%B6%E6%9E%8404-reduxrxjs%E5%92%8Cngrxstore-%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8store%E4%BB%A5%E5%8F%8A%E4%B8%BA%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 17 Oct 2018 13:27:04 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular%E6%9E%B6%E6%9E%8404-reduxrxjs%E5%92%8Cngrxstore-%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8store%E4%BB%A5%E5%8F%8A%E4%B8%BA%E4%BB%80%E4%B9%88/</guid>
      <description>这篇文章是正在进行的Angular架构系列的一部分，我们将在视图层和服务层一级介绍常见的设计问题和解决方案。 这是完整系列： 视图层架构-智能组</description>
    </item>
    
    <item>
      <title>(译)Angular架构03-如何使用`Observable`数据服务构建`Angular`应用程序及常见的设计缺陷</title>
      <link>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular%E6%9E%B6%E6%9E%8403-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8observable%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BAangular%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7/</link>
      <pubDate>Wed, 17 Oct 2018 08:25:57 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular%E6%9E%B6%E6%9E%8403-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8observable%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BAangular%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7/</guid>
      <description>这篇文章是正在进行的Angular架构系列的一部分，我们将在视图层和服务层一级介绍常见的设计问题和解决方案。 这是完整系列： 视图层架构-智能组</description>
    </item>
    
    <item>
      <title>(译)Angular架构02-容器与展示组件常见的设计缺陷</title>
      <link>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular%E6%9E%B6%E6%9E%8402-%E5%AE%B9%E5%99%A8%E4%B8%8E%E5%B1%95%E7%A4%BA%E7%BB%84%E4%BB%B6%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7/</link>
      <pubDate>Mon, 15 Oct 2018 20:36:31 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular%E6%9E%B6%E6%9E%8402-%E5%AE%B9%E5%99%A8%E4%B8%8E%E5%B1%95%E7%A4%BA%E7%BB%84%E4%BB%B6%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7/</guid>
      <description>这篇文章是正在进行的Angular架构系列的一部分，我们将在视图层和服务层一级介绍常见的设计问题和解决方案。 这是完整系列： 视图层架构-智能组</description>
    </item>
    
    <item>
      <title>(译)Angular架构01-智能组件与展示组件</title>
      <link>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular%E6%9E%B6%E6%9E%8401-%E6%99%BA%E8%83%BD%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%B1%95%E7%A4%BA%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 15 Oct 2018 14:04:46 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular%E6%9E%B6%E6%9E%8401-%E6%99%BA%E8%83%BD%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%B1%95%E7%A4%BA%E7%BB%84%E4%BB%B6/</guid>
      <description>这篇文章是正在进行的Angular架构系列的一部分，我们将在视图层和服务层一级介绍常见的设计问题和解决方案。 这是完整系列： 视图层架构-智能组</description>
    </item>
    
    <item>
      <title>(译)Angular NgRx Entity完全实用指南</title>
      <link>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular-ngrx-entity%E5%AE%8C%E5%85%A8%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 12 Oct 2018 14:48:58 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/web/angular/%E8%AF%91angular-ngrx-entity%E5%AE%8C%E5%85%A8%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>使用 NgRx 构建我们的应用程序时，我们要做的第一件事就是确定在store中存储数据的最佳格式。 我们需要在任何 NgRx 应用程序中处理集中存储中的业务数据，</description>
    </item>
    
    <item>
      <title>iptables详解-5-实用匹配扩展iprange,string,time</title>
      <link>https://kiyonlin.github.io/post/work/iptables/iptables-5-%E5%AE%9E%E7%94%A8%E5%8C%B9%E9%85%8D%E6%89%A9%E5%B1%95-iprange-string-time/</link>
      <pubDate>Wed, 22 Aug 2018 08:59:15 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/iptables/iptables-5-%E5%AE%9E%E7%94%A8%E5%8C%B9%E9%85%8D%E6%89%A9%E5%B1%95-iprange-string-time/</guid>
      <description>本章介绍三个实用的规则匹配扩展模块1：iprange 、string 和 time。 注意 本系列文章测试环境为 centos 7，iptables 版本 1.4.21</description>
    </item>
    
    <item>
      <title>iptables详解-4-规则匹配</title>
      <link>https://kiyonlin.github.io/post/work/iptables/iptables-4-%E8%A7%84%E5%88%99%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Tue, 21 Aug 2018 14:35:08 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/iptables/iptables-4-%E8%A7%84%E5%88%99%E5%8C%B9%E9%85%8D/</guid>
      <description>本章介绍更多的规则匹配条件。 注意 本系列文章测试环境为 centos 7，iptables 版本 1.4.21。 源IP地址 指定多个IP地址 1 2 3 4 5 6 iptables -I INPUT -s 10.211.55.9,10.211.55.10</description>
    </item>
    
    <item>
      <title>iptables详解-3-规则管理</title>
      <link>https://kiyonlin.github.io/post/work/iptables/iptables-3-%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 15 Aug 2018 14:19:31 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/iptables/iptables-3-%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86/</guid>
      <description>本章学习如何对 iptables 规则进行管理。 注意 本系列文章测试环境为 centos 7，iptables 版本 1.4.21。 准备工作 iptables 中最常用的匹配条件就是源ip，源端口</description>
    </item>
    
    <item>
      <title>iptables详解-2-查询命令</title>
      <link>https://kiyonlin.github.io/post/work/iptables/iptables-2-%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 15 Aug 2018 11:37:05 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/iptables/iptables-2-%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</guid>
      <description>本章介绍 iptables 常用的查询命令。 注意 本系列文章测试环境为 centos 7，iptables 版本 1.4.21。 查看表规则 iptables 内置了5张表，分别是 raw、 nat、 m</description>
    </item>
    
    <item>
      <title>iptables详解-1-简介</title>
      <link>https://kiyonlin.github.io/post/work/iptables/iptables-1-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 15 Aug 2018 08:45:33 +0000</pubDate>
      
      <guid>https://kiyonlin.github.io/post/work/iptables/iptables-1-%E7%AE%80%E4%BB%8B/</guid>
      <description>iptables 是各种防火墙的基础，需要系统学习。本篇先了解 iptables 的一些基本概念。 注意 本系列文章测试环境为 centos 7，iptables 版本 1.4.21。 说明 iptables 是用来</description>
    </item>
    
  </channel>
</rss>