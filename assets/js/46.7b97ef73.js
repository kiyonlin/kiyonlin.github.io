(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{218:function(a,t,s){"use strict";s.r(t);var n=s(2),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("h2",{attrs:{id:"存储类别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储类别","aria-hidden":"true"}},[a._v("#")]),a._v(" 存储类别")]),a._v(" "),s("p",[a._v("数据都存储在内存中，从硬件方面来讲，被存储的每个值都占用一定的物理内存，C语言把这样的一块内存称为对象（object）。对象可以储存一个或多个值。")]),a._v(" "),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[a._v("int")]),a._v(" entity "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token number"}},[a._v("3")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("code",[a._v("entity")]),a._v(" 为标志符（identifier），是一个名称，可以用来指定（designate）特定对象的内容。")]),a._v(" "),s("p",[a._v("用存储期（storage dutation）描述对象，所谓存储器是指对象在内存中保留了多长时间。")]),a._v(" "),s("p",[a._v("用作用域（scope）和链接（linkage）描述标志符，标志符的作用域和链接表明了程序的哪些部分可以使用它。")]),a._v(" "),s("h3",{attrs:{id:"作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 作用域")]),a._v(" "),s("ul",[s("li",[a._v("块作用域（block scope） 变量的可见范围是从定义处到包含该定义的块的末尾")]),a._v(" "),s("li",[a._v("文件作用域（file scope） 变量定义在函数的外面，从它的定义处到该定义处所在文件的尾部均可见")])]),a._v(" "),s("h4",{attrs:{id:"翻译单元"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#翻译单元","aria-hidden":"true"}},[a._v("#")]),a._v(" 翻译单元")]),a._v(" "),s("p",[a._v("编译器源代码文件和所有的头文件都看成是一个包含信息的单独文件，这个文件被称为翻译单元（translation unit）。描述一个具有文件作用域的变量时，它的实际可见范围是整个翻译单元。")]),a._v(" "),s("h3",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接","aria-hidden":"true"}},[a._v("#")]),a._v(" 链接")]),a._v(" "),s("p",[a._v("块作用域属于"),s("code",[a._v("无链接")]),a._v("变量，文件作用域可以是外部链接或内部链接。"),s("code",[a._v("外部链接")]),a._v("变量可以在多文件程序中使用（全局作用域或者程序作用域），"),s("code",[a._v("内部链接")]),a._v("变量只能在一个翻译单元中使用（文件作用域）。")]),a._v(" "),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[a._v("int")]),a._v(" giants "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token number"}},[a._v("5")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{attrs:{class:"token comment"}},[a._v("// 文件作用域，外部链接")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("int")]),a._v(" dodgers "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token number"}},[a._v("3")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{attrs:{class:"token comment"}},[a._v("// 文件作用域，内部链接")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{attrs:{class:"token function"}},[a._v("main")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),s("span",{attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h3",{attrs:{id:"存储期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储期","aria-hidden":"true"}},[a._v("#")]),a._v(" 存储期")]),a._v(" "),s("ul",[s("li",[a._v("静态存储期 在程序执行期间一直存在，比如文件作用域变量")]),a._v(" "),s("li",[a._v("线程存储期 用于并发程序设计，从被声明时到线程结束一直存在。以关键字 "),s("code",[a._v("_Thread_local")]),a._v(" 声明一个对象，每个线程都获得该变量的私有备份")]),a._v(" "),s("li",[a._v("自动存储期 当程序进入块时，块作用域变量会被分配内存，退出块时，分配给变量的内存会被释放")]),a._v(" "),s("li",[a._v("动态分配存储期 使用malloc或calloc分配内存")])]),a._v(" "),s("h3",{attrs:{id:"寄存器变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寄存器变量","aria-hidden":"true"}},[a._v("#")]),a._v(" 寄存器变量")]),a._v(" "),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[a._v("register")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("int")]),a._v(" quick"),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("寄存器变量存储在CPU的寄存器中，无法获取寄存器变量的地址。声明变量为 "),s("code",[a._v("register")]),a._v(" 类别与直接命令相比更像是一种请求。编译器必须根据寄存器或最快可用内存的数量衡量请求，或者直接忽略请求。忽略请求的情况下，寄存器变量就变成普通的自动变量，但仍然不能对该变量使用地址运算符。")]),a._v(" "),s("h3",{attrs:{id:"外部链接的静态变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外部链接的静态变量","aria-hidden":"true"}},[a._v("#")]),a._v(" 外部链接的静态变量")]),a._v(" "),s("p",[a._v("外部链接的静态变量具有文件作用域、外部链接和静态存储期。该类别有时称为外部存储类别（external storage class），属于该类别的变量称为外部变量（external variable）。如果一个源码文件使用的外部变量定义在另一个源码文件中，必须用 "),s("code",[a._v("extern")]),a._v(" 在该文件中声明该变量。")]),a._v(" "),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[a._v("extern")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("char")]),a._v(" Coal"),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{attrs:{class:"token comment"}},[a._v("// 如果Coal被定义在另一个文件中")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("编译器会假设 "),s("code",[a._v("Coal")]),a._v(" 实际的定义在该程序的别处，也许在别的文件中。该声明并不会引起分配存储空间。因此不要用关键字 "),s("code",[a._v("extern")]),a._v(" 创建外部定义，而只用它来引用现有的外部定义。")]),a._v(" "),s("h3",{attrs:{id:"多文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 多文件")]),a._v(" "),s("p",[a._v("当程序由多个翻译单元组成时，才体现区别内部链接和外部链接的重要性。复杂的C程序通常由多个单独的源代码文件组成。如果外部变量定义在一个文件中，那么其他文件在使用该变量之前必须先声明它（用 "),s("code",[a._v("extern")]),a._v(" 关键字）。")]),a._v(" "),s("h2",{attrs:{id:"分配内存：malloc-、calloc-和free"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分配内存：malloc-、calloc-和free","aria-hidden":"true"}},[a._v("#")]),a._v(" 分配内存：malloc()、calloc()和free()")]),a._v(" "),s("p",[a._v("malloc()函数接受一个参数：所需内存字节数(函数名可以理解为memory alloc)。它会找到合适的空闲内存块，这样的内存是匿名的。内存分配成功时，返回动态分配内存块的首字节地址，分配失败则返回空指针。在 ANSI C 中，动态分配的内存应该坚持使用强制类型转换，提高代码的可读性。")]),a._v(" "),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[a._v("double")]),a._v(" "),s("span",{attrs:{class:"token operator"}},[a._v("*")]),a._v(" ptd"),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nptd "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token keyword"}},[a._v("double")]),a._v(" "),s("span",{attrs:{class:"token operator"}},[a._v("*")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{attrs:{class:"token function"}},[a._v("malloc")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token number"}},[a._v("30")]),a._v(" "),s("span",{attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("sizeof")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token keyword"}},[a._v("double")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("ptd "),s("span",{attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{attrs:{class:"token constant"}},[a._v("NULL")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{attrs:{class:"token function"}},[a._v("puts")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token string"}},[a._v('"Memory allocation failed. Goodbye."')]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{attrs:{class:"token function"}},[a._v("exit")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("EXIT_FAILURE"),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("calloc()函数接受两个无符号整数（size_t）作为参数（函数名可以理解为count alloc），第一个参数是所需要的存储单元数量，第二个参数是存储单元的大小（以字节为单位）。")]),a._v(" "),s("p",[a._v("使用动态分配的内存后要使用 free()函数进行释放，否则会引起内存泄漏（memory leak）。")])])}],!1,null,null,null);e.options.__file="存储类别、链接和内存管理.md";t.default=e.exports}}]);